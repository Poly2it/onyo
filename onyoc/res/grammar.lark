start: function*

function: (/ðŸ§…/|/def/) NAME "(" _namelist ")" block

block: "{" exec* "}"

exec: NAME SETOP expr ";" -> set
    | expr "[" expr "]" "=" expr ";" -> setitem
    | "push" expr "," expr ";" -> push
    | "remove" expr "," expr ";" -> remove
    | "print" expr ";" -> print
    | "return" expr ";" -> returnx
    | "if" expr block -> ifx
    | "if" expr block "else" block -> ifelse
    | "if" expr block ("elif" expr block)+ -> ifelif
    | "if" expr block ("elif" expr block)+ "else" block -> ifelifelse
    | "while" expr block -> whilex
    | NAME "(" _exprlist ")" ";" -> call
    | "for" NAME "in" expr block -> forx

expr: NULL|BOOL|INT|FLOAT|STRING|NAME|tuple|list
    | "(" expr ")"
    | "!" expr -> notx
    | expr "&&" expr -> andx
    | expr "||" expr -> orx
    | expr "==" expr -> eq
    | expr "!=" expr -> neq
    | expr "<" expr -> lt
    | expr ">" expr -> gt
    | expr "<=" expr -> lteq
    | expr ">=" expr -> gteq
    | expr "+" expr -> add
    | expr "-" expr -> sub
    | expr "*" expr -> mul
    | expr "/" expr -> div
    | expr "%" expr -> mod
    | "-" expr -> minus
    | "bool" "(" expr ")" -> bool
    | "int" "(" expr ")" -> int
    | "float" "(" expr ")" -> float
    | "str" "(" expr ")" -> str
    | "type" "(" expr ")" -> type
    | NAME "(" _exprlist ")" -> call
    | expr "[" expr "]" -> getitem
    | "index" "(" expr "," expr ")" -> index
    | "len" "(" expr ")" -> len
    | "if "expr "then" expr "else" expr -> ternary
    | NAME ":=" expr -> walrus

_exprlist: [expr ("," expr)*]
_stringlist: [STRING ("," STRING)*]
_namelist: [NAME ("," NAME)*]

tuple: "{" _exprlist "}"
list: "[" _exprlist "]"

SETOP: "="|"+="|"-="|"*="|"/="|"%="

NULL: "null"
BOOL: "true"|"false"
MACROVAR: /[_a-zA-Z][_a-zA-Z0-9]*\!/
NAME: /[_a-zA-Z][_a-zA-Z0-9]*/
STRING: /"([^"\\]|\\.)*"/
INT: /[\-+]?[0-9]+/
FLOAT: /-?[0-9]+\.[0-9]+/

MCOMMENT: /\/\*(\*(?!\/)|[^*])*\*\//
SCOMMENT: /\/\/.*/

%ignore " "
%ignore "\n"
%ignore "\t"
%ignore MCOMMENT
%ignore SCOMMENT
